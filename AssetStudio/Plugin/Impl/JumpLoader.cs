using System;
using System.Diagnostics;
using System.IO;

namespace AssetStudio.Plugin.Impl;

public class JumpLoader : FileLoader
{
    public override Stream ProcessFile(Stream file, string filename)
    {
        var buffer = new byte[file.Length];
        file.CheckedRead(buffer);

        var bufferSpan = buffer.AsSpan();
        
        var rem = bufferSpan.Length % 8;
        var count = bufferSpan.Length / 8;

        var foundKey = TryGetKey(bufferSpan[..8], out var keyArray);
        Debug.Assert(foundKey, "foundKey");

        var key = keyArray.AsSpan();
        for (int i = 0; i < count; i++)
        {
            bufferSpan.As<ulong>()[i] ^= key.As<ulong>()[i % (key.Length / 8)];
        }

        if (rem > 0)
        {
            for (int i = count * 8; i < bufferSpan.Length; i++)
            {
                bufferSpan[i] ^= key[i % key.Length];
            }
        }

        return new MemoryStream(buffer);
    }

    public override bool CanProcessFile(Stream file, string filename)
    {
        var buffer = (stackalloc byte[8]);
        file.CheckedRead(buffer);

        return TryGetKey(buffer, out _);
    }

    private static bool TryGetKey(Span<byte> header, out byte[] keyArray)
    {
        var known = "UnityFS\0"u8;
        var temp = (stackalloc byte[8]);
        temp.As<ulong>()[0] = header.As<ulong>()[0] ^ known.As<ulong>()[0];

        foreach (var key in Keys)
        {
            if (temp.SequenceEqual(key.AsSpan(..8)))
            {
                keyArray = key;
                return true;
            }
        }

        keyArray = Array.Empty<byte>();

        return false;
    }

    private static readonly byte[] Key1 =
    {
        0x6b, 0xc9, 0xac, 0x0e, 0xe7, 0xd2, 0xb1, 0x99, 0x39, 0x59, 0x26, 0x56, 0x1b, 0x6c, 0xbb, 0xa4,
        0x83, 0xc8, 0x79, 0x2e, 0x4b, 0xb2, 0x9d, 0x69, 0x35, 0xb8, 0x9a, 0xd6, 0xd5, 0x63, 0x95, 0x20,
        0x14, 0x82, 0x1c, 0x7c, 0xd4, 0xa9, 0x15, 0x56, 0xc3, 0xc5, 0xd7, 0x21, 0x03, 0x4e, 0x4a, 0x34,
        0x6b, 0x05, 0x2d, 0x0b, 0xe2, 0x7d, 0x7d, 0xd7, 0xb2, 0xae, 0x9e, 0x56, 0x91, 0xba, 0x81, 0x81,
        0x0e, 0x08, 0x4d, 0xa0, 0x09, 0xb5, 0x60, 0x74, 0x58, 0x36, 0x89, 0x09, 0x19, 0x2c, 0x10, 0xb1,
        0xd0, 0xa3, 0x4c, 0x36, 0xaa, 0x95, 0xbc, 0x10, 0x39, 0x30, 0x93, 0xe8, 0xad, 0x38, 0x51, 0xaa,
        0xca, 0x08, 0x67, 0x03, 0x08, 0xd1, 0x20, 0x05, 0x27, 0x0b, 0x9d, 0xb1, 0x4b, 0x42, 0x98, 0x03,
        0x5a, 0x49, 0x97, 0xb0, 0x2a, 0xb6, 0x3a, 0x2c, 0x33, 0xa3, 0x65, 0xc7, 0x7d, 0xb9, 0x41, 0xad,
        0xe7, 0x70, 0x59, 0x61, 0x82, 0x59, 0xc9, 0x5a, 0x0b, 0x13, 0x6d, 0x95, 0x31, 0x31, 0x23, 0x22,
        0xd0, 0x51, 0x45, 0x59, 0x09, 0x57, 0xa2, 0x60, 0x3b, 0xce, 0x9b, 0x6e, 0x22, 0x9e, 0x87, 0xbd,
        0x83, 0x88, 0x73, 0xd0, 0x79, 0xd0, 0xac, 0xdc, 0xe1, 0x6c, 0xb3, 0xa4, 0xcc, 0x98, 0x04, 0xe8,
        0xb6, 0xbb, 0xac, 0x21, 0xb9, 0x2a, 0x6e, 0x78, 0x01, 0xed, 0xc1, 0xa6, 0x79, 0xe0, 0x9b, 0x68,
        0x7b, 0x8a, 0x25, 0xe4, 0x47, 0xbb, 0x5d, 0x2a, 0xc0, 0x5a, 0xde, 0x31, 0xec, 0x5c, 0xce, 0x6d,
        0xbe, 0x68, 0x1e, 0x93, 0x44, 0x89, 0x56, 0x68, 0x4c, 0x6e, 0xd0, 0x46, 0xb0, 0x97, 0xe4, 0x72,
        0x23, 0xb5, 0x87, 0x18, 0xd5, 0x2d, 0xa9, 0x0e, 0x63, 0xae, 0xce, 0x4a, 0x69, 0xd0, 0xd1, 0x6b,
        0xb0, 0x0c, 0x1a, 0xbd, 0xe3, 0x01, 0x45, 0x8b, 0x93, 0xd5, 0x83, 0x9c, 0xb7, 0x12, 0x6c, 0xd5
    };

    private static readonly byte[] Key2 =
    {
        0x8c, 0xeb, 0x0a, 0xaa, 0xe8, 0x85, 0x82, 0xcd, 0x2a, 0xb1, 0x56, 0xea, 0x45, 0x59, 0x93, 0x30,
        0xec, 0x88, 0xd5, 0xab, 0xd2, 0x8a, 0x1c, 0x98, 0x5b, 0x25, 0x68, 0xd6, 0x60, 0xc2, 0xaf, 0x12,
        0xfd, 0xdf, 0xf3, 0xe1, 0x93, 0xed, 0x5f, 0xb9, 0x46, 0x08, 0x38, 0x67, 0x52, 0x41, 0x9a, 0xca,
        0x0f, 0xe3, 0x3c, 0x57, 0xad, 0xfd, 0x11, 0xd6, 0xf9, 0x63, 0xfc, 0xf0, 0xd0, 0xe3, 0x06, 0x4b,
        0x47, 0x0d, 0x11, 0x8c, 0xca, 0x8b, 0xa1, 0xf7, 0xa4, 0x38, 0xf9, 0xa6, 0x2e, 0x72, 0x08, 0xb9,
        0xc2, 0x9e, 0x09, 0xf7, 0xc3, 0x2f, 0x33, 0xca, 0x4e, 0x84, 0xf8, 0x2a, 0xb3, 0xb4, 0xb9, 0xce,
        0x5b, 0x76, 0xb5, 0x41, 0x4d, 0x5f, 0xc4, 0xb0, 0xf0, 0xa9, 0x3f, 0xb8, 0x68, 0xf0, 0xd0, 0xcf,
        0x0c, 0x9e, 0xa3, 0x57, 0x1f, 0x29, 0xec, 0xea, 0x48, 0xa8, 0x9e, 0x22, 0x1b, 0x46, 0xb5, 0xd9,
        0x06, 0xc8, 0xcd, 0x76, 0x5a, 0xe5, 0x6d, 0x10, 0xa6, 0x28, 0xcb, 0x49, 0xd4, 0x7c, 0xb2, 0x9c,
        0x20, 0xc4, 0xc3, 0xd8, 0x9d, 0x77, 0xf9, 0x59, 0x2c, 0x04, 0x18, 0x91, 0x4a, 0xe1, 0xcb, 0x5c,
        0xe7, 0xb1, 0x44, 0x96, 0x64, 0xb1, 0x1b, 0x01, 0x4b, 0xa7, 0x96, 0xed, 0x9d, 0xff, 0x9d, 0x17,
        0xa6, 0x74, 0x31, 0x86, 0x69, 0x73, 0xc0, 0x37, 0xef, 0x58, 0x47, 0x8f, 0x1b, 0x2b, 0x7c, 0x55,
        0x64, 0x24, 0xf8, 0x25, 0x29, 0x72, 0x19, 0xa6, 0x4e, 0x85, 0xf2, 0xcf, 0xa5, 0xd2, 0x39, 0x0f,
        0x2f, 0xdf, 0x9e, 0x17, 0xb0, 0x50, 0x33, 0xd0, 0xce, 0xd4, 0xa7, 0x4f, 0x5c, 0x1d, 0x1b, 0x93,
        0x6a, 0x58, 0x3b, 0x04, 0xcc, 0xc0, 0xe5, 0xb6, 0xae, 0x1e, 0x68, 0x04, 0x44, 0xdc, 0x00, 0x3b,
        0x6d, 0x7d, 0x07, 0x75, 0x64, 0x1b, 0x54, 0xd4, 0x4e, 0x97, 0x60, 0x8d, 0x0f, 0x3e, 0xbf, 0x46
    };

    private static readonly byte[] Key3 =
    {
        0x6f, 0x49, 0x9a, 0x5d, 0x9b, 0x73, 0xcd, 0x41, 0xfd, 0xf2, 0xdc, 0xf3, 0xdc, 0x35, 0xef, 0x07,
        0x43, 0x50, 0x0d, 0x09, 0xa0, 0xad, 0x20, 0x79, 0x23, 0x42, 0xbb, 0x25, 0x58, 0xec, 0x6e, 0x93,
        0x32, 0x15, 0xb6, 0xd7, 0x28, 0x0b, 0x86, 0x6e, 0x09, 0x7c, 0x82, 0xc6, 0xf5, 0xf5, 0xe4, 0x8d,
        0x20, 0x18, 0x54, 0x07, 0x76, 0x05, 0xae, 0x73, 0xec, 0x61, 0x2c, 0xd6, 0xb8, 0x74, 0x7d, 0x96,
        0xa3, 0x47, 0x2e, 0xab, 0x34, 0xaa, 0x18, 0x02, 0xb8, 0xf4, 0x55, 0x57, 0xd5, 0x01, 0xc5, 0x92,
        0x30, 0xf1, 0xd3, 0x1c, 0xc9, 0x38, 0xf5, 0x11, 0x6e, 0x7d, 0xab, 0xcc, 0xfb, 0x3e, 0xb3, 0x50,
        0x21, 0x1d, 0x87, 0x3d, 0x6d, 0x9e, 0x33, 0xc8, 0x73, 0xa7, 0xdb, 0xa8, 0xf2, 0x75, 0xeb, 0x73,
        0x67, 0x0d, 0x24, 0xcc, 0x69, 0xdd, 0x13, 0xb0, 0xa9, 0x63, 0xb2, 0x5f, 0xcb, 0x65, 0x4d, 0xe9,
        0x5e, 0xd7, 0x2f, 0xee, 0xc9, 0xba, 0x9e, 0x79, 0x06, 0x76, 0xbb, 0xc7, 0x8d, 0xf8, 0xf4, 0x57,
        0xc3, 0x4a, 0x59, 0x3e, 0x94, 0x70, 0x82, 0x33, 0x74, 0x28, 0xf8, 0xb8, 0x6c, 0xd5, 0x20, 0xa6,
        0x17, 0x82, 0xce, 0x28, 0x04, 0x6d, 0x4e, 0x63, 0x82, 0xb3, 0xda, 0xdd, 0xc0, 0xfd, 0xda, 0xbf,
        0x39, 0x59, 0x7d, 0x26, 0x68, 0xc3, 0x8d, 0x31, 0x85, 0x6a, 0x06, 0x62, 0xd5, 0x68, 0xc1, 0x81,
        0x0d, 0xe5, 0xb8, 0x66, 0x86, 0x07, 0x16, 0xb6, 0x28, 0xa4, 0xdf, 0xef, 0xcb, 0x23, 0x2e, 0x60,
        0x58, 0x99, 0x6a, 0xf9, 0xea, 0xc8, 0x1a, 0xa2, 0x8b, 0x09, 0xbf, 0xb6, 0xf8, 0x8c, 0xc6, 0xee,
        0xa5, 0xac, 0x26, 0xe9, 0xef, 0x6b, 0x16, 0x1a, 0x5d, 0x8b, 0x65, 0x6d, 0x6c, 0xc8, 0x55, 0x25,
        0xf1, 0xff, 0xa2, 0xe3, 0x8e, 0x66, 0x55, 0x19, 0xbf, 0x79, 0xee, 0xf0, 0xb3, 0x67, 0xa3, 0xf7
    };

    private static readonly byte[][] Keys = { Key1, Key2, Key3 };
}